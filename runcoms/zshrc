#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

#for c in wslfetch wslpath wslsys wslupath wslusc wslvar wslview
#do
#	alias $c="PATH=\"$PATH:/mnt/c/windows/system32\" $c"
#done


eval "$(direnv hook zsh)"


if (which zprof > /dev/null 2>&1) ;then
   zprof | less
fi

if [[ -d "${ZDOTDIR:-$HOME}/.zprezto/external" ]]; then
   zstyle ':prezto:load' pmodule-dirs "${ZDOTDIR:-$HOME}/.zprezto/external"

   autoload -Uz cd-bookmark
   alias cdb='cd-bookmark'

   autoload -U +X bashcompinit && bashcompinit
   source /etc/bash_completion.d/azure-cli

fi

if [[ -s "${HOME}/.zprezto/external/git-flow-completion/git-flow-completion.zsh" ]]; then
   source ${HOME}/.zprezto/external/git-flow-completion/git-flow-completion.zsh
fi

#alias open=wslview
function open {
  local p
  if [[ -n "$1" ]]; then
   if [[ "$1" =~ ^http.* ]]; then
    p = "$1"
   else
		p="$(wslpath -w "$1")"
   fi
	else
		p='.'
	fi
	wslview "$p"
}

#

function cdw {
    cd `wslpath "$1"`
}

if [[ -s '/mnt/c/Users/takekazu/AppData/Local/Programs/Microsoft VS Code/bin/code' ]]; then
   alias code='/mnt/c/Users/takekazu/AppData/Local/Programs/Microsoft\ VS\ Code/bin/code'
fi


if [[ -s '/mnt/c/Users/takekazu/AppData/Local/Programs/Microsoft VS Code Insiders/bin/code-insiders' ]]; then
   alias code='/mnt/c/Users/takekazu/AppData/Local/Programs/Microsoft\ VS\ Code\ Insiders/bin/code-insiders'
fi

alias clip='/mnt/c/Windows/System32/clip.exe'

export PS1="\$ "

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# zsh parameter completion for the dotnet CLI

_dotnet_zsh_complete()
{
  local completions=("$(dotnet complete "$words")")

  reply=( "${(ps:\n:)completions}" )
}

compctl -K _dotnet_zsh_complete dotnet

# for Windows Terminal

keep_current_path() {
  if [[ -n "$WSL_ENV" ]]; then
    printf "\e]9;9;%s\e\\" "$(wslpath -w "$PWD")"
  fi
}
precmd_functions+=(keep_current_path)

title() {
  local t=${1:-"$(hostname)"}
  local r

  r=$(git remote get-url origin) &>! /dev/null
  if [ $? -eq 0 ]; then
     t="$t $(basename $r) $(git branch --show)"
  else
     t="$t $(basename ${PWD})"
  fi
  echo -ne '\033]0;'"$t"'\a'
}

sc() {
  local p
  if [[ -n "$1" ]]; then
   code --folder-uri vscode-remote://ssh-remote+m900.lowe.e-omi.org/"$1"
  fi
}

sf() {
  local p
  if [[ -n "$1" ]]; then
   code --file-uri vscode-remote://ssh-remote+m900.lowe.e-omi.org/"$1"
  fi
}

function peco-history-selection() {
    BUFFER=`history -n 1 | tac  | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    zle reset-prompt
}

zle -N peco-history-selection
bindkey '^R' peco-history-selection

#autoload -Uz promptinit
#promptinit
prompt redhat
# prompt module eats unterminated lines
# https://github.com/sorin-ionescu/prezto/issues/1643#issuecomment-444638199
setopt prompt_cr && setopt prompt_sp


#compdef buf

# zsh completion for buf                                  -*- shell-script -*-

__buf_debug()
{
    local file="$BASH_COMP_DEBUG_FILE"
    if [[ -n ${file} ]]; then
        echo "$*" >> "${file}"
    fi
}

_buf()
{
    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local lastParam lastChar flagPrefix requestComp out directive comp lastComp noSpace
    local -a completions

    __buf_debug "\n========= starting completion logic =========="
    __buf_debug "CURRENT: ${CURRENT}, words[*]: ${words[*]}"

    # The user could have moved the cursor backwards on the command-line.
    # We need to trigger completion from the $CURRENT location, so we need
    # to truncate the command-line ($words) up to the $CURRENT location.
    # (We cannot use $CURSOR as its value does not work when a command is an alias.)
    words=("${=words[1,CURRENT]}")
    __buf_debug "Truncated words[*]: ${words[*]},"

    lastParam=${words[-1]}
    lastChar=${lastParam[-1]}
    __buf_debug "lastParam: ${lastParam}, lastChar: ${lastChar}"

    # For zsh, when completing a flag with an = (e.g., buf -n=<TAB>)
    # completions must be prefixed with the flag
    setopt local_options BASH_REMATCH
    if [[ "${lastParam}" =~ '-.*=' ]]; then
        # We are dealing with a flag with an =
        flagPrefix="-P ${BASH_REMATCH}"
    fi

    # Prepare the command to obtain completions
    requestComp="${words[1]} __complete ${words[2,-1]}"
    if [ "${lastChar}" = "" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go completion code.
        __buf_debug "Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __buf_debug "About to call: eval ${requestComp}"

    # Use eval to handle any environment variables and such
    out=$(eval ${requestComp} 2>/dev/null)
    __buf_debug "completion output: ${out}"

    # Extract the directive integer following a : from the last line
    local lastLine
    while IFS='\n' read -r line; do
        lastLine=${line}
    done < <(printf "%s\n" "${out[@]}")
    __buf_debug "last line: ${lastLine}"

    if [ "${lastLine[1]}" = : ]; then
        directive=${lastLine[2,-1]}
        # Remove the directive including the : and the newline
        local suffix
        (( suffix=${#lastLine}+2))
        out=${out[1,-$suffix]}
    else
        # There is no directive specified.  Leave $out as is.
        __buf_debug "No directive found.  Setting do default"
        directive=0
    fi

    __buf_debug "directive: ${directive}"
    __buf_debug "completions: ${out}"
    __buf_debug "flagPrefix: ${flagPrefix}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        __buf_debug "Completion received error. Ignoring completions."
        return
    fi

    local activeHelpMarker="_activeHelp_ "
    local endIndex=${#activeHelpMarker}
    local startIndex=$((${#activeHelpMarker}+1))
    local hasActiveHelp=0
    while IFS='\n' read -r comp; do
        # Check if this is an activeHelp statement (i.e., prefixed with $activeHelpMarker)
        if [ "${comp[1,$endIndex]}" = "$activeHelpMarker" ];then
            __buf_debug "ActiveHelp found: $comp"
            comp="${comp[$startIndex,-1]}"
            if [ -n "$comp" ]; then
                compadd -x "${comp}"
                __buf_debug "ActiveHelp will need delimiter"
                hasActiveHelp=1
            fi

            continue
        fi

        if [ -n "$comp" ]; then
            # If requested, completions are returned with a description.
            # The description is preceded by a TAB character.
            # For zsh's _describe, we need to use a : instead of a TAB.
            # We first need to escape any : as part of the completion itself.
            comp=${comp//:/\\:}

            local tab="$(printf '\t')"
            comp=${comp//$tab/:}

            __buf_debug "Adding completion: ${comp}"
            completions+=${comp}
            lastComp=$comp
        fi
    done < <(printf "%s\n" "${out[@]}")

    # Add a delimiter after the activeHelp statements, but only if:
    # - there are completions following the activeHelp statements, or
    # - file completion will be performed (so there will be choices after the activeHelp)
    if [ $hasActiveHelp -eq 1 ]; then
        if [ ${#completions} -ne 0 ] || [ $((directive & shellCompDirectiveNoFileComp)) -eq 0 ]; then
            __buf_debug "Adding activeHelp delimiter"
            compadd -x "--"
            hasActiveHelp=0
        fi
    fi

    if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
        __buf_debug "Activating nospace."
        noSpace="-S ''"
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local filteringCmd
        filteringCmd='_files'
        for filter in ${completions[@]}; do
            if [ ${filter[1]} != '*' ]; then
                # zsh requires a glob pattern to do file filtering
                filter="\*.$filter"
            fi
            filteringCmd+=" -g $filter"
        done
        filteringCmd+=" ${flagPrefix}"

        __buf_debug "File filtering command: $filteringCmd"
        _arguments '*:filename:'"$filteringCmd"
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subdir
        subdir="${completions[1]}"
        if [ -n "$subdir" ]; then
            __buf_debug "Listing directories in $subdir"
            pushd "${subdir}" >/dev/null 2>&1
        else
            __buf_debug "Listing directories in ."
        fi

        local result
        _arguments '*:dirname:_files -/'" ${flagPrefix}"
        result=$?
        if [ -n "$subdir" ]; then
            popd >/dev/null 2>&1
        fi
        return $result
    else
        __buf_debug "Calling _describe"
        if eval _describe "completions" completions $flagPrefix $noSpace; then
            __buf_debug "_describe found some completions"

            # Return the success of having called _describe
            return 0
        else
            __buf_debug "_describe did not find completions."
            __buf_debug "Checking if we should do file completion."
            if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
                __buf_debug "deactivating file completion"

                # We must return an error code here to let zsh know that there were no
                # completions found by _describe; this is what will trigger other
                # matching algorithms to attempt to find completions.
                # For example zsh can match letters in the middle of words.
                return 1
            else
                # Perform file completion
                __buf_debug "Activating file completion"

                # We must return the result of this command, so it must be the
                # last command, or else we must store its result to return it.
                _arguments '*:filename:_files'" ${flagPrefix}"
            fi
        fi
    fi
}

# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_buf" ]; then
    _buf
fi

alias date='date --rfc-3339=seconds'
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

if [[ -d "$HOME/.pyenv" ]]; then
   export PYENV_ROOT="$HOME/.pyenv"
   [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
   eval "$(pyenv init -)"
fi

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /home/takekazu/.dart-cli-completion/zsh-config.zsh ]] && . /home/takekazu/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


## git 

alias gcd='cd $(ghq list -p | peco --layout=bottom-up)'
alias wcd='cd $(git worktree list | peco --layout=bottom-up --query "$LBUFFER" | cut -d " " -f 1)'

function ghc() {
  local l=`ghq create "$1"`
  cd $l
}

function gwa() {
  if [[ -n "$1" ]]; then
    local b=$1
    [[ $(git ls-remote --exit-code --heads origin refs/heads/$b) ]] || local opt=-b
    git worktree add  ${GIT_WORKTREE_HOME}/${$(git rev-parse --show-toplevel)##$(ghq root)/}/$b $opt $b
  fi
}

